/*
 * Password Management API
 * API для управления паролями, включает операции CRUD
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreatePasswordRequest;
import org.openapitools.client.model.ListPasswords200ResponseInner;
import org.openapitools.client.model.UpdatePassword200Response;
import org.openapitools.client.model.UpdatePasswordRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPassword
     * @param createPasswordRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Пароль успешно создан </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPasswordCall(CreatePasswordRequest createPasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPasswordRequest;

        // create path and map variables
        String localVarPath = "/api/passwords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPasswordValidateBeforeCall(CreatePasswordRequest createPasswordRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createPasswordRequest' is set
        if (createPasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'createPasswordRequest' when calling createPassword(Async)");
        }
        

        okhttp3.Call localVarCall = createPasswordCall(createPasswordRequest, _callback);
        return localVarCall;

    }

    /**
     * Создать новый пароль
     * 
     * @param createPasswordRequest  (required)
     * @return ListPasswords200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Пароль успешно создан </td><td>  -  </td></tr>
     </table>
     */
    public ListPasswords200ResponseInner createPassword(CreatePasswordRequest createPasswordRequest) throws ApiException {
        ApiResponse<ListPasswords200ResponseInner> localVarResp = createPasswordWithHttpInfo(createPasswordRequest);
        return localVarResp.getData();
    }

    /**
     * Создать новый пароль
     * 
     * @param createPasswordRequest  (required)
     * @return ApiResponse&lt;ListPasswords200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Пароль успешно создан </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPasswords200ResponseInner> createPasswordWithHttpInfo(CreatePasswordRequest createPasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = createPasswordValidateBeforeCall(createPasswordRequest, null);
        Type localVarReturnType = new TypeToken<ListPasswords200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создать новый пароль (asynchronously)
     * 
     * @param createPasswordRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Пароль успешно создан </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPasswordAsync(CreatePasswordRequest createPasswordRequest, final ApiCallback<ListPasswords200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPasswordValidateBeforeCall(createPasswordRequest, _callback);
        Type localVarReturnType = new TypeToken<ListPasswords200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePassword
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Пароль успешно удален, содержимого нет </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePasswordCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/passwords/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePasswordValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePassword(Async)");
        }
        

        okhttp3.Call localVarCall = deletePasswordCall(id, _callback);
        return localVarCall;

    }

    /**
     * Удалить пароль по ID
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Пароль успешно удален, содержимого нет </td><td>  -  </td></tr>
     </table>
     */
    public void deletePassword(Integer id) throws ApiException {
        deletePasswordWithHttpInfo(id);
    }

    /**
     * Удалить пароль по ID
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Пароль успешно удален, содержимого нет </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePasswordWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deletePasswordValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удалить пароль по ID (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Пароль успешно удален, содержимого нет </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3 .Call deletePasswordAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePasswordValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPassword
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о пароле </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPasswordCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/passwords/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPasswordValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPassword(Async)");
        }
        

        okhttp3.Call localVarCall = getPasswordCall(id, _callback);
        return localVarCall;

    }

    /**
     * Получить один пароль по ID
     * 
     * @param id  (required)
     * @return ListPasswords200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о пароле </td><td>  -  </td></tr>
     </table>
     */
    public ListPasswords200ResponseInner getPassword(Integer id) throws ApiException {
        ApiResponse<ListPasswords200ResponseInner> localVarResp = getPasswordWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Получить один пароль по ID
     * 
     * @param id  (required)
     * @return ApiResponse&lt;ListPasswords200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о пароле </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPasswords200ResponseInner> getPasswordWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getPasswordValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ListPasswords200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить один пароль по ID (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о пароле </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPasswordAsync(Integer id, final ApiCallback<ListPasswords200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPasswordValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ListPasswords200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPasswords
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список паролей </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPasswordsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/passwords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPasswordsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listPasswordsCall(_callback);
        return localVarCall;

    }

    /**
     * Получить список всех паролей
     * 
     * @return List&lt;ListPasswords200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список паролей </td><td>  -  </td></tr>
     </table>
     */
    public List<ListPasswords200ResponseInner> listPasswords() throws ApiException {
        ApiResponse<List<ListPasswords200ResponseInner>> localVarResp = listPasswordsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Получить список всех паролей
     * 
     * @return ApiResponse&lt;List&lt;ListPasswords200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список паролей </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListPasswords200ResponseInner>> listPasswordsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listPasswordsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ListPasswords200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получить список всех паролей (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список паролей </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPasswordsAsync(final ApiCallback<List<ListPasswords200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPasswordsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ListPasswords200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePassword
     * @param id  (required)
     * @param updatePasswordRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пароль успешно обновлен </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePasswordCall(Integer id, UpdatePasswordRequest updatePasswordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePasswordRequest;

        // create path and map variables
        String localVarPath = "/api/passwords/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePasswordValidateBeforeCall(Integer id, UpdatePasswordRequest updatePasswordRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePassword(Async)");
        }
        
        // verify the required parameter 'updatePasswordRequest' is set
        if (updatePasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePasswordRequest' when calling updatePassword(Async)");
        }
        

        okhttp3.Call localVarCall = updatePasswordCall(id, updatePasswordRequest, _callback);
        return localVarCall;

    }

    /**
     * Обновить пароль по ID
     * 
     * @param id  (required)
     * @param updatePasswordRequest  (required)
     * @return UpdatePassword200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пароль успешно обновлен </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePassword200Response updatePassword(Integer id, UpdatePasswordRequest updatePasswordRequest) throws ApiException {
        ApiResponse<UpdatePassword200Response> localVarResp = updatePasswordWithHttpInfo(id, updatePasswordRequest);
        return localVarResp.getData();
    }

    /**
     * Обновить пароль по ID
     * 
     * @param id  (required)
     * @param updatePasswordRequest  (required)
     * @return ApiResponse&lt;UpdatePassword200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пароль успешно обновлен </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatePassword200Response> updatePasswordWithHttpInfo(Integer id, UpdatePasswordRequest updatePasswordRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePasswordValidateBeforeCall(id, updatePasswordRequest, null);
        Type localVarReturnType = new TypeToken<UpdatePassword200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Обновить пароль по ID (asynchronously)
     * 
     * @param id  (required)
     * @param updatePasswordRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пароль успешно обновлен </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePasswordAsync(Integer id, UpdatePasswordRequest updatePasswordRequest, final ApiCallback<UpdatePassword200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePasswordValidateBeforeCall(id, updatePasswordRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdatePassword200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
